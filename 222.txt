-- 数据库与表结构定义（修正外键类型与级联删除）
CREATE DATABASE IF NOT EXISTS `gamedb`;
USE `gamedb`;

-- account 表
CREATE TABLE `account` (
  `account_id` int unsigned AUTO_INCREMENT PRIMARY KEY,
  `email` varchar(50) UNIQUE NOT NULL,
  `phone` char(11) UNIQUE NOT NULL,
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP,
  `is_banned` tinyint(1) DEFAULT 0
) ENGINE=InnoDB;

-- item_template 表
CREATE TABLE `item_template` (
  `item_id` int unsigned AUTO_INCREMENT PRIMARY KEY,
  `item_name` varchar(30) NOT NULL,
  `type` enum('武器','防具','饰品','消耗品') NOT NULL,
  `rarity` enum('白色','绿色','蓝色','紫色','橙色') NOT NULL,
  `base_attack` int DEFAULT 0,
  `base_defense` int DEFAULT 0,
  `req_level` tinyint DEFAULT 1,
  `is_bind` tinyint(1) DEFAULT 0,
  `icon_path` varchar(100)
) ENGINE=InnoDB;

-- drop_table 表
CREATE TABLE `drop_table` (
  `drop_table_id` int unsigned AUTO_INCREMENT PRIMARY KEY,
  `item_id` int unsigned NOT NULL,
  `drop_rate` decimal(5,2),
  `is_bind` tinyint(1) DEFAULT 0,
  FOREIGN KEY (`item_id`) REFERENCES `item_template` (`item_id`) ON DELETE CASCADE,
  CHECK (`drop_rate` BETWEEN 0 AND 100)
) ENGINE=InnoDB;

-- map_info 表
CREATE TABLE `map_info` (
  `map_id` int unsigned AUTO_INCREMENT PRIMARY KEY,
  `map_name` varchar(50) NOT NULL,
  `map_type` enum('新手村','野外','副本') NOT NULL,
  `is_safe_zone` tinyint(1) DEFAULT 1,
  `spawn_config` json,
  `unlock_level` tinyint DEFAULT 1,
  `icon_path` varchar(100),
  CHECK (`unlock_level` BETWEEN 1 AND 100)
) ENGINE=InnoDB;

-- monster_template 表
CREATE TABLE `monster_template` (
  `monster_id` int unsigned AUTO_INCREMENT PRIMARY KEY,
  `monster_name` varchar(30) NOT NULL,
  `monster_type` enum('普通怪','精英怪','BOSS') NOT NULL,
  `level` tinyint DEFAULT 1,
  `hp_max` int NOT NULL,
  `attack` int NOT NULL,
  `defense` int NOT NULL,
  `map_id` int unsigned NOT NULL,
  `drop_table_id` int unsigned NOT NULL,
  `move_speed` tinyint DEFAULT 1,
  FOREIGN KEY (`map_id`) REFERENCES `map_info` (`map_id`) ON DELETE CASCADE,
  FOREIGN KEY (`drop_table_id`) REFERENCES `drop_table` (`drop_table_id`) ON DELETE CASCADE,
  CHECK (`level` BETWEEN 1 AND 100),
  CHECK (`move_speed` BETWEEN 1 AND 5)
) ENGINE=InnoDB;

-- character 表
CREATE TABLE `character` (
  `char_id` int unsigned AUTO_INCREMENT PRIMARY KEY,
  `account_id` int unsigned NOT NULL,
  `char_name` varchar(20) UNIQUE NOT NULL,
  `level` tinyint DEFAULT 1,
  `hp_max` int DEFAULT 100,
  `attack` int DEFAULT 10,
  `defense` int DEFAULT 5,
  FOREIGN KEY (`account_id`) REFERENCES `account` (`account_id`) ON DELETE CASCADE,
  CHECK (`level` BETWEEN 1 AND 100)
) ENGINE=InnoDB;

-- player_item 表
CREATE TABLE `player_item` (
  `item_inst_id` int AUTO_INCREMENT PRIMARY KEY,
  `char_id` int unsigned,
  `item_id` int unsigned,
  `count` int,
  `is_equipped` tinyint(1) DEFAULT 0,
  `enhance_level` int,
  FOREIGN KEY (`char_id`) REFERENCES `character` (`char_id`) ON DELETE CASCADE,
  FOREIGN KEY (`item_id`) REFERENCES `item_template` (`item_id`) ON DELETE CASCADE
) ENGINE=InnoDB;

-- auction_item 表
CREATE TABLE `auction_item` (
  `auction_id` int AUTO_INCREMENT PRIMARY KEY,
  `item_inst_id` int NOT NULL,
  `seller_id` int unsigned,
  `last_bidder_id` int unsigned,
  `start_price` int NOT NULL,
  `buy_now_price` int NOT NULL,
  `current_highest_bid` int DEFAULT 0,
  `end_time` datetime NOT NULL,
  `status` enum('上架中','已完成','流拍') DEFAULT '上架中',
  FOREIGN KEY (`item_inst_id`) REFERENCES `player_item` (`item_inst_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (`seller_id`) REFERENCES `character` (`char_id`) ON DELETE SET NULL,
  FOREIGN KEY (`last_bidder_id`) REFERENCES `character` (`char_id`) ON DELETE SET NULL
) ENGINE=InnoDB;

-- 触发器（修正语法错误）
DELIMITER ;;

-- 账号封禁时删除角色
CREATE TRIGGER `tr_account_ban_delete_char` AFTER UPDATE ON `account`
FOR EACH ROW
BEGIN
  IF NEW.is_banned = 1 AND OLD.is_banned = 0 THEN
    DELETE FROM `character` WHERE account_id = NEW.account_id;
  END IF;
END;;

-- 拍卖结束自动结算
CREATE TRIGGER `tr_auction_end` AFTER UPDATE ON `auction_item`
FOR EACH ROW
BEGIN
  IF NEW.end_time <= NOW() AND NEW.status = '上架中' THEN
    IF NEW.last_bidder_id IS NOT NULL THEN
      UPDATE `player_item` 
      SET `char_id` = NEW.last_bidder_id, `is_listed` = 0
      WHERE `item_inst_id` = NEW.item_inst_id;
      UPDATE `auction_item` SET `status` = '已完成' WHERE `auction_id` = NEW.auction_id;
    ELSE
      UPDATE `player_item` SET `is_listed` = 0 WHERE `item_inst_id` = NEW.item_inst_id;
      UPDATE `auction_item` SET `status` = '流拍' WHERE `auction_id` = NEW.auction_id;
    END IF;
  END IF;
END;;

-- 装备/卸下物品更新角色属性
CREATE TRIGGER `tr_equip_attr` AFTER UPDATE ON `player_item`
FOR EACH ROW
BEGIN
  DECLARE atk INT;
  DECLARE def INT;
  IF NEW.is_equipped = 1 AND OLD.is_equipped = 0 THEN
    SELECT `base_attack`, `base_defense` INTO atk, def 
    FROM `item_template` 
    WHERE `item_id` = NEW.item_id;
    UPDATE `character` 
    SET `attack` = `attack` + atk, `defense` = `defense` + def 
    WHERE `char_id` = NEW.char_id;
  ELSEIF NEW.is_equipped = 0 AND OLD.is_equipped = 1 THEN
    SELECT `base_attack`, `base_defense` INTO atk, def 
    FROM `item_template` 
    WHERE `item_id` = OLD.item_id;
    UPDATE `character` 
    SET `attack` = `attack` - atk, `defense` = `defense` - def 
    WHERE `char_id` = OLD.char_id;
  END IF;
END;;

DELIMITER ;